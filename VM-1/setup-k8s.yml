- hosts: VM-1
  tasks:
    - name: Check if cluster-0 exists
      shell: "kind get clusters"
      register: clusters

    - name: Create kind-cluster-0
      become: yes
      become_user: "{{ ansible_ssh_user }}"
      environment:
        PATH: "/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/bin"
      shell: |
        /usr/local/bin/kind create cluster --name cluster-0 --image kindest/node:v1.28.13
        sleep 30  # Wait for 30 seconds after the command runs
      when: "'cluster-0' not in clusters.stdout"

    - name: Update Helm repo
      shell: "helm repo update"
      args:
        chdir: "/home/dev/helm/repository"  # Adjust this if needed
<<<<<<< HEAD

    - name: Create argocd namespace
      shell: "kubectl create namespace argocd || echo 'Namespace argocd already exists'"
      ignore_errors: yes  # Ignore errors if the namespace already exists

    - name: Create metallb-system namespace
      shell: "kubectl create namespace metallb-system || echo 'Namespace metallb-system already exists'"
      ignore_errors: yes  # Ignore errors if the namespace already exists

    - name: Create monitoring namespace
      shell: "kubectl create namespace monitoring || echo 'Namespace monitoring already exists'"
      ignore_errors: yes  # Ignore errors if the namespace already exists

    - name: Check if Argo CD is already installed
      shell: "helm ls --namespace argocd | grep argocd"
      register: argocd_installed
      ignore_errors: yes  # Ignore if the release is not found

    - name: Install or upgrade Argo CD
      shell: |
        if [ -z "{{ argocd_installed.stdout }}" ]; then
          helm install argocd argo/argo-cd --namespace argocd
        else
          helm upgrade argocd argo/argo-cd --namespace argocd || true
        fi
      ignore_errors: yes  # Ignore errors if the upgrade fails

    - name: Wait for 2 minutes
      pause:
        minutes: 2

    - name: Check if Argo Rollouts is already installed
      shell: "helm ls --namespace argo-rollouts | grep argo-rollouts"
      register: argo_rollouts_installed
      ignore_errors: yes  # Ignore if the release is not found

    - name: Install or upgrade Argo Rollouts
      shell: |
        if [ -z "{{ argo_rollouts_installed.stdout }}" ]; then
          helm install argo-rollouts argo/argo-rollouts --namespace argo-rollouts --create-namespace
        else
          helm upgrade argo-rollouts argo/argo-rollouts --namespace argo-rollouts
        fi

    - name: Check if NGINX Ingress is already installed
      shell: "helm ls --namespace ingress-nginx | grep ingress-nginx"
      register: nginx_installed
      ignore_errors: yes  # Ignore if the release is not found

    - name: Install or upgrade NGINX Ingress
      shell: |
        if [ -z "{{ nginx_installed.stdout }}" ]; then
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.metrics.enabled=true \
            --set-string controller.podAnnotations."prometheus\.io/scrape"="true" \
            --set-string controller.podAnnotations."prometheus\.io/port"="10254"
        else
          helm upgrade ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --set controller.metrics.enabled=true \
            --set-string controller.podAnnotations."prometheus\.io/scrape"="true" \
            --set-string controller.podAnnotations."prometheus\.io/port"="10254" \
            --set controller.metrics.service.type=NodePort \
            --set controller.metrics.service.nodePort=30000
        fi

    - name: Update NodePort for ingress-nginx-controller service
      shell: |
        kubectl patch svc ingress-nginx-controller -n ingress-nginx \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/ports/0/nodePort", "value": 30400}, {"op": "replace", "path": "/spec/ports/1/nodePort", "value": 30500}]'
      register: update_nginx_service
      ignore_errors: yes  # Ignore errors for debugging purposes

    - name: Check the updated ingress-nginx-controller service details
      shell: kubectl get svc ingress-nginx-controller -n ingress-nginx
      register: nginx_service_details

    - name: Display the ingress-nginx-controller service details
      debug:
        var: nginx_service_details.stdout


    
